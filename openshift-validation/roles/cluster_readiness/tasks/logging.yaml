---
- name: Initialize variables
  ansible.builtin.set_fact:
    cr_pipelines: []
    cr_outputs: []

- name: Get logging operator
  register: cr_get_logging_operator_result
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    namespace: "{{ openshift_logging_namespace }}"
    # kubeconfig: "{{ kubeconfig_file }}"

- name: Logging operator deployment status
  ansible.builtin.set_fact:
    cr_operator_deployed: "{{ false if (cr_get_logging_operator_result.resources | length) == 0 else true }}"

- name: Report if openshift logging operator is not deployed
  when: not cr_operator_deployed
  vars:
    _id: LOG-01
    _new_result: "openshift logging operator is not deployed"
  ansible.builtin.include_tasks: store-result.yaml

- name: Only if logging operator is deployed
  when: cr_operator_deployed
  block:
    - name: Get ClusterLogging instance
      register: cr_get_cluster_logging_result
      kubernetes.core.k8s_info:
        api_version: logging.openshift.io/v1
        kind: ClusterLogging
        name: instance
        namespace: "{{ openshift_logging_namespace }}"
        # kubeconfig: "{{ kubeconfig_file }}"

    - name: Cluster ClusterLogging status
      ansible.builtin.set_fact:
        cr_instance_exist: "{{ false if (cr_get_cluster_logging_result.resources | length) == 0 else true }}"

    - name: Report if ClusterLogging instance does not exist
      when: not cr_instance_exist
      vars:
        _id: LOG-02
        _new_result: "ClusterLogging instance does not exist"
      ansible.builtin.include_tasks: store-result.yaml

    - name: Only if ClusterLogging instance exist
      when: cr_instance_exist
      block:
        - name: Report if ClusterLogging instance is not in managed state
          when: cr_get_cluster_logging_result.resources[0].spec.managementState != "Managed"
          vars:
            _id: LOG-03
            _new_result: "ClusterLogging instance is not in managed state"
          ansible.builtin.include_tasks: store-result.yaml

        - name: Get log collector type
          vars:
            _instance: "{{ cr_get_cluster_logging_result.resources[0] }}"
          ansible.builtin.set_fact:
            cr_collector_type: "{{ lookup('ansible.builtin.template', 'log-collector-type.j2') | trim }}"

        - name: Report if ClusterLogging collection type is not vector
          when: cr_collector_type != 'vector'
          vars:
            _id: LOG-04
            _new_result: "ClusterLogging collection type is not vector"
          ansible.builtin.include_tasks: store-result.yaml

        # wip
        # - name: Get ClusterLogForwarder instance
        #   register: cr_get_log_forwarder_result
        #   kubernetes.core.k8s_info:
        #     api_version: logging.openshift.io/v1
        #     kind: ClusterLogForwarder
        #     namespace: "{{ openshift_logging_namespace }}"
        #     # kubeconfig: "{{ kubeconfig_file }}"

        # - name: Cluster ClusterLogForwarder status
        #   ansible.builtin.set_fact:
        #     cr_log_forwarder_exist: "{{ false if (cr_get_log_forwarder_result.resources | length) == 0 else true }}"

        # - name: Only if ClusterLogForwarder instance(s) exist
        #   when: cr_log_forwarder_exist
        #   block:
        #     - debug: var=cr_get_log_forwarder_result

        #     - name: Parse ClusterLogForwarder outputs
        #       vars:
        #         _forwarders: "{{ cr_get_log_forwarder_result.resources }}"
        #       ansible.builtin.set_fact:
        #         cr_outputs: "{{ lookup('ansible.builtin.template', 'forwarder-outputs.j2') | trim | from_yaml }}"

        #     # get all pipelines, ignoring pipelines that only forward to default output
        #     - name: Parse ClusterLogForwarder pipelines
        #       vars:
        #         _forwarders: "{{ cr_get_log_forwarder_result.resources }}"
        #       ansible.builtin.set_fact:
        #         cr_pipelines: "{{ lookup('ansible.builtin.template', 'forwarder-pipelines.j2') | trim | from_yaml }}"

        #     - debug: var=cr_outputs
        #     - debug: var=cr_pipelines
...
