---
- name: block with always
  block:
    - name: init
      ansible.builtin.import_tasks: init.yaml

    - name: create resources
      loop: "{{ ar_templates }}"
      kubernetes.core.k8s:
        resource_definition: "{{ lookup('ansible.builtin.template', item) }}"
        namespace: "{{ ar_app_namespace }}"
        state: present
        kubeconfig: "{{ kubeconfig_file }}"

    - name: wait for deployments to be ready
      ansible.builtin.import_tasks: wait-deployments.yaml

    # the setup-script.js file is from mounted secret
    - name: create database and user on mongodb
      kubernetes.core.k8s_exec:
        pod: mongodb-0     # pods created by statefulset always has numeric suffix, starting with 0
        namespace: "{{ ar_app_namespace }}"
        container: mongodb
        command: mongosh --file /var/run/secrets/mongodb/setup-script.js
        kubeconfig: "{{ kubeconfig_file }}"

    - name: get namegen route
      register: ar_get_route_result
      kubernetes.core.k8s_info:
        api_version: route.openshift.io/v1
        kind: Route
        name: namegen
        namespace: "{{ ar_app_namespace }}"
        kubeconfig: "{{ kubeconfig_file }}"

    # just in case, clear all random names from the database
    - name: use namegen api to remove all random names
      ansible.builtin.uri:
        url: "http://{{ ar_get_route_result.resources[0].spec.host }}/api/names"
        method: DELETE
        headers:
          Accept: application/json

    - name: insert 3 new random names
      vars:
        _count: 3
      # with_sequence: count=3
      ansible.builtin.import_tasks: insert-random-names.yaml

    - name: use namegen api to get the random names in the database
      vars:   # the result will be stored in ar_before_failure_random_names variable
        _var_name: ar_before_failure_random_names
      ansible.builtin.import_tasks: get-names.yaml

    - name: simulate failure
      ansible.builtin.import_tasks: simulate-failure.yaml

    - name: use namegen api to get the random names in the database after recovery
      vars:   # the result will be stored in ar_after_recovery_random_names variable
        _var_name: ar_after_recovery_random_names
      ansible.builtin.import_tasks: get-names.yaml

    - name: insert 3 additional random names
      # with_sequence: count=1
      vars:
        _count: 3
      ansible.builtin.import_tasks: insert-random-names.yaml

    - name: use namegen api to get the random names in the database
      vars:   # the result will be stored in ar_after_insert_new_random_names variable
        _var_name: ar_after_insert_new_random_names
      ansible.builtin.import_tasks: get-names.yaml

    - name: assert passed or failed
      ansible.builtin.assert:
        that:
          - (ar_after_recovery_random_names | length) > 0
          - (ar_before_failure_random_names | length) > 0
          - (ar_after_recovery_random_names | length) == (ar_before_failure_random_names | length)
          # conditions below ensure the data before and after failure is the same
          - (ar_after_recovery_random_names | map(attribute='id') | sort) == (ar_before_failure_random_names | map(attribute='id') | sort)
          - (ar_after_recovery_random_names | map(attribute='firstName') | sort) == (ar_before_failure_random_names | map(attribute='firstName') | sort)
          # condition below ensure app still working, i.e. can still generates and adds random names
          - (ar_after_insert_new_random_names | length) == (ar_before_failure_random_names | length) + 3
        success_msg: "stateful application working properly after failure"
        fail_msg: "stateful application not working properly after failure"

  always:
    - name: delete resources
      when: delete_resources | bool
      loop: "{{ ar_templates | reverse }}"
      kubernetes.core.k8s:
        resource_definition: "{{ lookup('ansible.builtin.template', item) }}"
        namespace: "{{ ar_app_namespace }}"
        state: absent
        kubeconfig: "{{ kubeconfig_file }}"
...
