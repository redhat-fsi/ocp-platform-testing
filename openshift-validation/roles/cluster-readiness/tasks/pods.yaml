---
- name: get all pods
  register: cr_get_pod_result
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    kubeconfig: "{{ kubeconfig_file }}"

- name: parse pods
  vars:
    _all_pods: "{{ cr_get_pod_result.resources }}"
    _forbidden_ns: "{{ forbidden_ns }}"
  ansible.builtin.set_fact:
    cr_incorrect_state_pods: "{{ lookup('ansible.builtin.template', 'parse-pods.j2') }}"
    cr_pods_with_many_restarts: "{{ lookup('ansible.builtin.template', 'pod-restarts.j2') }}"

- name: report if one or more pods not in Running/Completed state
  when: (cr_incorrect_state_pods.bad_pods | length) > 0
  vars:
    _new_result: "some pods not in Running/Completed state: {{ cr_incorrect_state_pods.bad_pods | join(', ') }}"
  ansible.builtin.include_tasks: store-result.yaml

- name: report if pods in forbidden namespaces
  when: (cr_incorrect_state_pods.forbidden_ns_pods | length) > 0
  vars:
    _new_result: "pods in [{{ forbidden_ns | join(', ') }}] namespaces: {{ cr_incorrect_state_pods.forbidden_ns_pods | join(', ') }}"
  ansible.builtin.include_tasks: store-result.yaml

- name: report pod with too many restarts ({{ pod_too_many_restarts }})
  when: (cr_pods_with_many_restarts | length) != 0
  vars:
    _new_result: "pod with too many restarts ({{ pod_too_many_restarts }}): {{ cr_pods_with_many_restarts | join(', ') }}"
  ansible.builtin.include_tasks: store-result.yaml

- name: get kube-apiserver pods
  register: cr_get_pod_result
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: openshift-etcd   # can be any namespace with pod, ideally namespace with stable pods
    kubeconfig: "{{ kubeconfig_file }}"

- name: get kube-apiserver pods metrics
  register: cr_get_pod_metrics_result
  kubernetes.core.k8s_info:
    api_version: metrics.k8s.io/v1beta1
    kind: PodMetrics
    namespace: openshift-etcd   # can be any namespace with pod, ideally namespace with stable pods
    kubeconfig: "{{ kubeconfig_file }}"

- name: parse pod metrics
  ansible.builtin.set_fact:
    # only need containers in running state
    cr_running_container: "{{ cr_get_pod_result.resources | map(attribute='status.containerStatuses') | flatten |
                              selectattr('state.running', 'defined') | map(attribute='name') }}"
    # the podMetrics api reports metrics for all running container, including the infra/pause container
    # exclude the infra/pause container
    cr_usage_metrics: "{{ cr_get_pod_metrics_result.resources | map(attribute='containers') | flatten |
                          selectattr('name', '!=', 'POD') | map(attribute='usage') }}"

- name: report if pod metrics missing
  when: (cr_running_container | length) != (cr_usage_metrics | length)
  vars:
    _new_result: "missing one or more pods (containers) metrics"
  ansible.builtin.include_tasks: store-result.yaml

- name: report if missing pod cpu or memory metrics
  when: ((cr_usage_metrics | selectattr('cpu', 'defined') | length) != (cr_running_container | length) or
         (cr_usage_metrics | selectattr('memory', 'defined') | length) != (cr_running_container | length))
  vars:
    _new_result: "missing pod cpu and/or memory metrics"
  ansible.builtin.include_tasks: store-result.yaml
...
