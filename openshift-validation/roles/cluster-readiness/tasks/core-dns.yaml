---
- name: get dns operator
  register: cr_get_dns_operator_result
  kubernetes.core.k8s_info:
    api_version: operator.openshift.io/v1
    kind: DNS
    name: default
    kubeconfig: "{{ kubeconfig_file }}"

- name: get openshift console service
  register: cr_get_service_result
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Service
    name: console
    namespace: openshift-console
    kubeconfig: "{{ kubeconfig_file }}"

# using openshift console pod since the image has the dig tool
- name: get openshift console pods
  register: cr_get_pod_result
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: openshift-console
    label_selectors:
      - app = console
      - component = ui
    kubeconfig: "{{ kubeconfig_file }}"

- name: set variables
  ansible.builtin.set_fact:
    cr_cluster_domain: "{{ cr_get_dns_operator_result.resources[0].status.clusterDomain }}"
    cr_service_ip: "{{ cr_get_service_result.resources[0].spec.clusterIP }}"
    cr_service_port_name: "{{ cr_get_service_result.resources[0].spec.ports[0].name }}"
    cr_service_port_protocol: "{{ cr_get_service_result.resources[0].spec.ports[0].protocol | lower }}"
    cr_service_port: "{{ cr_get_service_result.resources[0].spec.ports[0].port }}"

- name: perform dns lookup against coredns
  register: cr_lookup_result
  loop:
    - type: a
      name: "console.openshift-console.svc.{{ cr_cluster_domain }}."
    - type: srv
      name: "{{ cr_service_port_name }}.{{ cr_service_port_protocol }}.console.openshift-console.svc.{{ cr_cluster_domain }}."
  ignore_errors: true    # dig return rc=0 even if the lookup failed; ignore error just in case
  kubernetes.core.k8s_exec:
    namespace: openshift-console
    pod: "{{ cr_get_pod_result.resources[0].metadata.name }}"
    command: "dig +short {{ item.type }} {{ item.name }}"
    kubeconfig: "{{ kubeconfig_file }}"

- name: set expected SRV record
  ansible.builtin.set_fact:
    cr_expected_srv_answer: "{{ cr_service_port }} console.openshift-console.svc.{{ cr_cluster_domain }}."

- name: report if coredns lookup of service A record failed
  when: (cr_lookup_result.results[0].stdout | trim) != cr_service_ip
  vars:
    _new_result: "coredns lookup of service A record failed"
  ansible.builtin.include_tasks: store-result.yaml

- name: report if coredns lookup of service SRV record failed
  when: not (cr_lookup_result.results[1].stdout | trim).endswith(cr_expected_srv_answer)
  vars:
    _new_result: "coredns lookup of service SRV record failed"
  ansible.builtin.include_tasks: store-result.yaml
...
