# this tasks list must run after machines.yaml
---
- name: initialize variables
  ansible.builtin.set_fact:
    cr_not_ready_nodes: []

- name: get nodes
  register: cr_get_node_result
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
    kubeconfig: "{{ kubeconfig_file }}"

- name: get node metrics
  register: cr_get_node_metrics_result
  kubernetes.core.k8s_info:
    api_version: metrics.k8s.io/v1beta1
    kind: NodeMetrics
    kubeconfig: "{{ kubeconfig_file }}"

- name: report if number of machines and nodes is not equal
  when: (cr_machine_count | int) != (cr_get_node_result.resources | length | int)
  vars:
    _new_result: "number of machines and nodes is not equal: [machines: {{ cr_machine_count }}, nodes: {{ cr_get_node_result.resources | length }}]"
  ansible.builtin.include_tasks: store-result.yaml

- name: count control nodes
  loop: "{{ cr_get_node_result.resources }}"
  loop_control:
    label: "{{ item.metadata.name }}"
  when: "'node-role.kubernetes.io/control-plane' in item.metadata.labels"
  ansible.builtin.set_fact:
    cr_control_count: "{{ cr_control_count | default(0) | int + 1 }}"

- name: count worker nodes
  loop: "{{ cr_get_node_result.resources }}"
  loop_control:
    label: "{{ item.metadata.name }}"
  when: "'node-role.kubernetes.io/worker' in item.metadata.labels"
  ansible.builtin.set_fact:
    cr_worker_count: "{{ cr_worker_count | default(0) | int + 1 }}"

- name: get nodes status
  loop: "{{ cr_get_node_result.resources }}"
  loop_control:
    label: "{{ item.metadata.name }}"
  when: (item.status.conditions | selectattr('type', '==', 'Ready'))[0].status != "True"
  ansible.builtin.set_fact:
    cr_not_ready_nodes: "{{ cr_not_ready_nodes | default([]) + [item.metadata.name] }}"

- name: report if incorrect control nodes count
  when: cr_control_count | int != control_nodes
  vars:
    _new_result: "control nodes count {{ cr_control_count }} does not match spec: {{ control_nodes }}"
  ansible.builtin.include_tasks: store-result.yaml

- name: report if incorrect worker nodes count
  when: cr_worker_count | int != worker_nodes
  vars:
    _new_result: "worker nodes count {{ cr_worker_count }} does not match spec: {{ worker_nodes }}"
  ansible.builtin.include_tasks: store-result.yaml

- name: report if one or more nodes not in ready state
  when: cr_not_ready_nodes | length != 0
  vars:
    _new_result: "the following nodes are not in ready state: {{ cr_not_ready_nodes | join(', ') }}"
  ansible.builtin.include_tasks: store-result.yaml

- name: get scheduler
  register: cr_get_scheduler_result
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Scheduler
    kubeconfig: "{{ kubeconfig_file }}"

- name: report if control nodes are schedulable
  when: cr_get_scheduler_result.resources[0].spec.mastersSchedulable | bool
  vars:
    _new_result: "the control nodes are schedulable }} "
  ansible.builtin.include_tasks: store-result.yaml

- name: parse node metrics
  ansible.builtin.set_fact:
    cr_usage_metrics: "{{ cr_get_node_metrics_result.resources | map(attribute='usage') }}"

- name: report if node metrics missing
  when: (cr_get_node_result.resources | length) != (cr_get_node_metrics_result.resources | length)
  vars:
    _new_result: "missing one or more nodes metrics"
  ansible.builtin.include_tasks: store-result.yaml

- name: report if missing node cpu or memory metrics
  when: ((cr_usage_metrics | selectattr('cpu', 'defined') | length) != (cr_get_node_result.resources | length) or
         (cr_usage_metrics | selectattr('memory', 'defined') | length) != (cr_get_node_result.resources | length))
  vars:
    _new_result: "missing node cpu and/or memory metrics"
  ansible.builtin.include_tasks: store-result.yaml
...
