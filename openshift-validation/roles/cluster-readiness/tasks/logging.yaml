---
- name: initialize variables
  ansible.builtin.set_fact:
    cr_pipelines: []
    cr_outputs: []

- name: get logging operator
  register: cr_get_logging_operator_result
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    namespace: "{{ openshift_logging_namespace }}"
    kubeconfig: "{{ kubeconfig_file }}"

- name: logging operator deployment status
  ansible.builtin.set_fact:
    cr_operator_deployed: "{{ false if (cr_get_logging_operator_result.resources | length) == 0 else true }}"

- name: report if openshift logging operator is not deployed
  when: not cr_operator_deployed
  vars:
    _new_result: "openshift logging operator is not deployed"
  ansible.builtin.include_tasks: store-result.yaml

- name: only if logging operator is deployed
  when: cr_operator_deployed
  block:
    - name: get ClusterLogging instance
      register: cr_get_cluster_logging_result
      kubernetes.core.k8s_info:
        api_version: logging.openshift.io/v1
        kind: ClusterLogging
        name: instance
        namespace: "{{ openshift_logging_namespace }}"
        kubeconfig: "{{ kubeconfig_file }}"

    - name: cluster ClusterLogging status
      ansible.builtin.set_fact:
        cr_instance_exist: "{{ false if (cr_get_cluster_logging_result.resources | length) == 0 else true }}"

    - name: report if ClusterLogging instance does not exist
      when: not cr_instance_exist
      vars:
        _new_result: "ClusterLogging instance does not exist"
      ansible.builtin.include_tasks: store-result.yaml

    - name: only if ClusterLogging instance exist
      when: cr_instance_exist
      block:
        - name: report if ClusterLogging instance is not in managed state
          when: cr_get_cluster_logging_result.resources[0].spec.managementState != "Managed"
          vars:
            _new_result: "ClusterLogging instance is not in managed state"
          ansible.builtin.include_tasks: store-result.yaml

        - name: get log collector type
          vars:
            _instance: "{{ cr_get_cluster_logging_result.resources[0] }}"
          ansible.builtin.set_fact:
            cr_collector_type: "{{ lookup('ansible.builtin.template', 'log-collector-type.j2') | trim }}"

        - name: report if ClusterLogging collection type is not vector
          when: cr_collector_type != 'vector'
          vars:
            _new_result: "ClusterLogging collection type is not vector"
          ansible.builtin.include_tasks: store-result.yaml




        # wip
        # - name: get ClusterLogForwarder instance
        #   register: cr_get_log_forwarder_result
        #   kubernetes.core.k8s_info:
        #     api_version: logging.openshift.io/v1
        #     kind: ClusterLogForwarder
        #     namespace: "{{ openshift_logging_namespace }}"
        #     kubeconfig: "{{ kubeconfig_file }}"

        # - name: cluster ClusterLogForwarder status
        #   ansible.builtin.set_fact:
        #     cr_log_forwarder_exist: "{{ false if (cr_get_log_forwarder_result.resources | length) == 0 else true }}"

        # - name: only if ClusterLogForwarder instance(s) exist
        #   when: cr_log_forwarder_exist
        #   block:
        #     - debug: var=cr_get_log_forwarder_result

        #     - name: parse ClusterLogForwarder outputs
        #       vars:
        #         _forwarders: "{{ cr_get_log_forwarder_result.resources }}"
        #       ansible.builtin.set_fact:
        #         cr_outputs: "{{ lookup('ansible.builtin.template', 'forwarder-outputs.j2') | trim | from_yaml }}"

        #     # get all pipelines, ignoring pipelines that only forward to default output
        #     - name: parse ClusterLogForwarder pipelines
        #       vars:
        #         _forwarders: "{{ cr_get_log_forwarder_result.resources }}"
        #       ansible.builtin.set_fact:
        #         cr_pipelines: "{{ lookup('ansible.builtin.template', 'forwarder-pipelines.j2') | trim | from_yaml }}"

        #     - debug: var=cr_outputs
        #     - debug: var=cr_pipelines
...
